 inputs, outputs, tree = load()
 lattices = [input_to_lattice(input) for input in inputs]


c0f76784.json

Caught a NotImplementedError: Trying to initialise a node list with : Var(1)->11:(2)*{3}(3)*{3}(0)*{3}11,[3(2)*{5}(3)*{4}(2)*{5}(1)*{4}2(3)*{5}(0)*{6},(1)*{5}(2)*{11}3(0)*{7}[(0)*{3}(3)*{3},5(2)*{6}3(0)*{6}3(2)*{6}]]

Repeat(2, Var(0)), Repear(3, Var(1)), Repeat(0, Var(0), Repeat(1, Var(1))

Codes of color: 4 with len 20, 26
 s_2((1, 0), {4})  {4}->(1, 0):None
Codes of color: 8 with len 19, 30
 s_4({8}, 32)  {8}->(0, 0):32
deleting color: 4

Codes:
Codes of color: 8 with len 23, 0
{8}->(3, 0):32 {8}->(3, 0):32
Codes of color: 4 with len 20, 26
s_2((4, 0), {4})  {4}->(4, 0):None
deleting color: 8


## Test bfs
inputs, outputs, tree = load()
grid = inputs[0]
coordinates = extract_coordinates(grid)
margin_spaces = marginalize(coordinates)
color = margin_spaces[1][3]
topology_c = SpaceTopology(*proportions(grid), color)
topology = SpaceTopology(*proportions(grid))
traversal, seen = bfs(color[0], topology)
descriptor = construct_descriptor((0, 2), topology)
descriptor2 =construct_descriptor((0, 2), topology_c)
grid1 = construct_grid((0,2), descriptor, topology)
grid2 = list_to_grid(*proportions(grid), color)
grid3 = construct_grid((0,2), descriptor2, topology_c)
print_colored_grid(grid3)


#####

inputs, outputs, tree = load()
correspondances, lattice1, lattice2 = test_align(inputs)
mask = lattice2.nodes[6]['value']['mask']
chain_code = serialize(mask)
grid_new = zeros(*proportions(mask))
unserialize(grid_new, chain_code)

####

inputs, outputs, tree = load()
correspondances, lattice1, lattice2 = test_align(inputs)
mask = lattice2.nodes[6]['value']['mask']
constraints = grid_to_list(mask)
valid = lambda x: valid_coordinates(*proportions(mask), constraints, x)
#topology = SpaceTopology(*proportions(mask), constraints)
#code1 = construct_node(constraints[0], topology, "dfs")
#code2 = construct_node(constraints[0], topology, "bfs")
code1 = construct_node(constraints[0], valid, "dfs")
code2 = construct_node(constraints[0], valid, "bfs")

refs = []
e = symbolize(code2, refs)
e = symbolize(e, refs)

refs[0]
refs[1]

###
inputs, outputs, tree = load()
###
inputs, outputs, tree = load()
correspondances, lattice1, lattice2 = test_align(inputs)
mask = lattice2.nodes[6]['value']['mask']
constraints = grid_to_list(mask)
topology = SpaceTopology(*proportions(mask), constraints)
code1 = construct_node(constraints[0], topology, "dfs")
code2 = construct_node(constraints[0], topology, "bfs"

refs = []
e = symbolize([code1], refs)
e = symbolize(e, refs)

refs[0]
refs[1]

#a = ast_to_grid((0,0), code1, topology, True)
#b = ast_to_grid((0,0), code2, topology, True)

print_colored_grid(ast_to_grid((0,0), code1, topology))
print_colored_grid(ast_to_grid((0,0), code2, topology))
#####
inputs, outputs, tree = load()
correspondances, lattice1, lattice2 = test_align(inputs)
mask = lattice2.nodes[1]['value']['mask']
const = grid_to_list(mask)
height, width = proportions(mask)
valid = lambda x: valid_coordinates(height, width, const, x)
code = construct_node(const[0], valid, "dfs")
####

#topologies = [(SpaceTopology(*proportions(mask), c), c) for mask, c in const]
#codes = [construct_node(c[0], topology, "dfs") for topology, c in topologies if len(c)>0]
inputs, outputs, tree = load()
correspondances, lattice1, lattice2 = test_align(inputs)
masks = [node['value']['mask'] for node in lattice2.nodes]
const = [grid_to_list(mask) for mask in masks]
height, width = proportions(masks[0])
valids = [(lambda x: valid_coordinates(height, width, c, x), c) for c in const]
filtered = [(c[0], is_valid) for is_valid, c in valids if len(c)>0]
codes = [construct_node(coord, is_valid, "dfs") for coord, is_valid in filtered]
####
inputs, outputs, tree = load()
correspondances, lattice1, lattice2 = test_align(inputs)
masks = [node['value']['mask'] for node in lattice2.nodes]
const = [grid_to_list(mask) for mask in masks]
codes = []

for mask, c in zip(masks, const):
    if len(c) > 0:
        height, width = proportions(mask)
        valid = lambda x, h=height, w=width, const=c: valid_coordinates(h, w, const, x)
        codes.append(construct_node(c[0], valid, "dfs"))

refs = []
e, _ = symbolize_next(codes, refs)

#e = symbolize(codes, refs)

#e = symbolize(e, refs)
#e = symbolize(e, refs)
for code in e:
    print(code)

e = unsymbolize(e, refs)

for code in e:
    print(code)

for code in refs:
    print(code)


code = codes[1]
def pri(node_ls):
    for n in node_ls:
        print(n)

######

inputs, outputs, tree = load()
correspondances, lattice1, lattice2 = test_align(inputs)
masks = [node['value']['mask'] for node in lattice2.nodes]
const = [(mask, grid_to_list(mask)) for mask in masks]
topologies = [(SpaceTopology(*proportions(mask), c), c) for mask, c in const]
codes = [construct_node(c[0], topology, "dfs") for topology, c in topologies if len(c)>0]

grid = zeros(*proportions(masks[0]))
coordinates_ls = [c[1][0] for c in const if len(c[1]) > 0]
co = codes[6]
coor = coordinates_ls[6]
populate(grid, coor, co)
print_colored_grid(grid)

###
inputs, outputs, tree = load()
#correspondances, lattice1, lattice2 = test_align(inputs)
refs1 = lattice1.refs
refs2 = lattice2.refs
nrefs, mappings = fuse_refs([refs1, refs2])
ncodes2 = update_asts(lattice2.codes, nrefs, mappings[1])
symbolize_together([lattice1, lattice2])

[0]
####
inputs, outputs, tree = load()
lattices = [input_to_lattice(input) for input in inputs]
symbolize_together(lattices)
lattice1 = lattices[0]
unsymb = unsymbolize(lattice1.codes, lattice1.refs)
lattice1.nodes[7]['value']
grid = zeros(lattice1.height, lattice1.width)

#u = unsymb[5]
subroots = unsymb[:4] + [unsymb[5]]
root = unsymb[4]
uni = UnionNode(subroots, root)

populate(grid, uni)
#unsymb[-3]

##
r = Root(Variable(-1), {1,3,4}, Moves("ssss"))
a = {}
a[r] = 1
a[r]


####
inputs, outputs, tree = load()
lattices = [input_to_lattice(input) for input in inputs]
symbolize_together(lattices)
lattice1 = lattices[0]
unsymb = unsymbolize(lattice1.codes, lattice1.refs)
lattice1.nodes[7]['value']
grid = zeros(lattice1.height, lattice1.width)

#u = unsymb[5]
subroots = unsymb[:4] + [unsymb[5]]
root = unsymb[4]
uni = UnionNode(subroots, root)

construction = []
populate(grid, uni, (0,0), 1, construction)
animate_grid(construction, delay=0.3)

###
inputs, outputs, tree = load()
lattices = [input_to_lattice(input) for input in inputs]
symbolize_together(lattices)
for lattice in lattices:
    lattice.update_unions()

lattice1 = lattices[0]
lattice2 = lattices[1]

display_unions(lattice1)
display_unions(lattice2)

####
inputs, outputs, tree = load()
lattices = [input_to_lattice(input) for input in inputs]
lattice1 = lattices[0]
lattice2 = lattices[1]
lattice3 = lattices[2]
node = lattice1.nodes[5]
#node = lattice1.nodes[4]

node = lattice2.nodes[1]

mask_list = grid_to_list(node['value']['mask'])
starts = get_potential_starting_points(mask_list)
#is_valid = lambda x: valid_coordinates(lattice1.height, lattice1.width, set(mask_list), x)
is_valid = lambda x: valid_coordinates(lattice2.height, lattice2.width, set(mask_list), x)


asts=[]
refs = []

if len(starts)>=1:
    # choose the best option by iterating overstart points and dfs/bfs
    for start in starts:
        for method in ["dfs", "bfs"]:
            ast = Root(start, node['value']['colors'], construct_node(start, is_valid, method))
            asts.append(ast)

asts = sorted(asts, key=len)
#asts = asts[:5]
asts_symb = symbolize(asts, [])

def argmin_by_len_and_depth(lst):
    def key_func(node):
        return len(node) + get_depth(node)
    return min(range(len(lst)), key=lambda i: key_func(lst[i]))

i = argmin_by_len_and_depth(symbolize(asts, []))

for i, ast in enumerate(asts):
    print(ast, len(ast))
    print(asts_symb[i], len(asts_symb[i]))

####
if len(starts)>=1:
    for start in starts:
        ast = Root(start, node['value']['colors'], construct_node_hybrid(start, is_valid))
        asts.append(ast)

###
inputs, outputs, tree = load()
lattices = [input_to_lattice(input) for input in inputs]
#symbolize_together(lattices)
lattice1 = lattices[0]
g = lattice_to_grid(lattice1)
print_colored_grid(g)
for l in lattices:
    u = unsymbolize(l.codes,l.refs)
    for i,code in enumerate(l.codes):
            print("Code: ", code)
            print("Unsymbolize code: ", u[i])

for ref in lattice1.refs:
    print(ref)


grid = zeros(lattices[0].height, lattices[0].width)
u = unsymbolize(lattices[0].codes, lattices[0].refs)
k = u[5].node
populate(grid, u[5])
print_colored_grid(grid)

code = lattice1.codes[-2]
r = code.node.nodes[0]
for c in r:
    print(c)

#####
inputs, outputs, tree = load()
lattices = [input_to_lattice(input) for input in inputs]
codes = [l.codes for l in lattices]
lattice2 = lattices[1]
print(lattice2.codes[6])
lattice2.symbolize()
print(lattice2.codes[6])
for ref in lattice2.refs:
    print(ref)

u = unsymbolize(lattice2.codes, lattice2.refs)
print(u[6])


symbolize_together(lattices)
lattice1 = lattices[0]
lattice2 = lattices[1]
lattice3 = lattices[2]
c1 = [l.codes for l in lattices]
u = [unsymbolize(c, lattice1.refs) for c in c1]
print(lattice2.codes[6])
print(u[1][6])

for ref in lattice2.refs:
    print(ref)


####
inputs, outputs, tree = load()
lattices = [input_to_lattice(input) for input in inputs]
codes = [l.codes for l in lattices]
#print(lattice2.codes[6])
lattice2.symbolize()
#print(lattice2.codes[6])
u = unsymbolize(lattice2.codes, lattice2.refs)
#print(u[6])


symbolize_together(lattices)
lattice1 = lattices[0]
lattice2 = lattices[1]
lattice3 = lattices[2]
c1 = [l.codes for l in lattices]
u = [unsymbolize(c, lattice1.refs) for c in c1]
for i, l in enumerate(codes):
    for j, c in enumerate(l):
        print(u[i][j] == c, u[i][j] == codes[i][j])
        print(codes[i][j])
        print(c1[i][j])
        print(u[i][j])


#print(lattice2.codes[6])
#print(u[1][6])

#for ref in lattice2.refs:
#    print(ref)
#######

inputs, outputs, tree = load()
lattices = [input_to_lattice(input) for input in inputs]
symbolize_together(lattices)
for lattice in lattices:
    grid = lattice_to_grid(lattice)
    print_colored_grid(grid)

for ref in lattices[0].refs:
    print(ref)

for l in lattices:
    print("\n")
    for code in l.codes:
        print(code)

l = ["22300322"]
s = "22300322"
l = [Moves(k) for k in s]
#find_repeating_pattern(l, 0)

for i in range(0, len(l)):
    for j in range(5):
        print(l[j])
    print("---------")
    for j in range(5):
        if i % 2 != 0:
            print(l[4+i-j].reverse())
        else:
            print(l[i+j])

###
def get_el(lattice):
    el =[]
    unsymb = unsymbolize(lattice.codes, lattice.refs)
    for i, code in enumerate(lattice.codes):
        if len(unsymb[i].colors)==1:
            el.append(code)
    return el

lattice1 = lattices[0]

####
inputs, outputs, tree = load()
l_inputs = [input_to_lattice(input) for input in inputs]
l_outputs = [input_to_lattice(output) for output in outputs]
symbolize_together(l_inputs)
l_input=l_inputs[0]
l_output=l_outputs[0]

l_output.refs = l_input.refs

lattice1.update_unions()

#grid = zeros(lattice1.height, lattice1.width)
#k = unsymbolize([lattice1.unions[-1]], lattice1.refs)[0]
#populate(grid, k)

for l in l_input:
    l.update_unions()
    print(l.unions[l.supremum])

l = l_inputs+l_outputs
symbolize_together(l)

# Program search:
for i in range(3):
    inp = l[i].unions[l[i].supremum]
    out = l[i+3].unions[l[i+3].supremum]
    inp_rel = [code for code in inps.codes]

for i in range(3):
    inp = l[i].unions[l[i].supremum]
    out = l[i+3].unions[l[i+3].supremum]
    #print(inp)
    print(set(inp.codes))
    #print(out)
    print(set(out.codes))
    print(set(inp.codes) & set(out.codes))

###
inputs, outputs = load()
l_inputs = [input_to_lattice(input) for input in inputs]
l_outputs = [input_to_lattice(output) for output in outputs]
l = l_inputs+l_outputs
symbolize_together(l)

for latt in l:
    latt.update_unions()

for i in range(3):
    print(f"Problem {i}")
    inp = l[i].unions[l[i].supremum]
    out = l[i+3].unions[l[i+3].supremum]
    inv = get_invariants([inp, out])
    pos_ls = []
    for code in inv:
        pos = get_hidden_pos([inp, out], code)
        if pos:
            pos_ls.append((pos[0], pos[1]))
        print(f"Invariant : {code}, pos: {get_hidden_pos([inp, out], code)}")
    shift = coordinate_shift(pos_ls)
    if shift:
        print(f"Global shift: {shift}")

for i in range(2):
    if i == 0:
        print(f"Inputs")
    else:
        print("output")
    latt = [l[i*3], l[i*3+1], l[i*3+2]]
    inv = get_invariants(latt)
    for code in inv:
        print(f"Invariant : {code}, pos: {get_hidden_pos(latt, code)}")


inp = l[2].unions[l[2].supremum]
out = l[5].unions[l[5].supremum]
print(get_invariants([inp, out]))

Note: remove duplicatas?
s6(4) = s0(0) here
(Var(0))*{4}
(0)*{Var(6)}


for la in l:
    la.symbolize()
    for code in la.codes:
        print(code)

functionalized
Branch([Moves('1'), Repeat(Moves('2'), 3), Moves('3'), Moves('4')]))


####
symbolize_together

for i, la in enumerate(l):
    print(f"Lattice n°{i}:")
    grid = lattice_to_grid(la)
    print_colored_grid(grid)


#for la in l:
#    la.symbolize()
#    for code in la.codes:
#        print(code)

[cat for cat in l if cat == "else"]
len([cat for cat in l if cat == "else"])

######
inputs, outputs = load()
l_inputs = [input_to_lattice(input) for input in inputs]
l_outputs = [input_to_lattice(output) for output in outputs]
l = l_inputs+l_outputs
symbolize_together(l)


for i in range(3):
    print(f'Problem n°{i}')
    out = l[i+3].nodes[l[i+3].supremum]['value']
    dist = [(j, distance(inp['value'], out, l[i].refs)) for j, inp in enumerate(l[i].nodes)]
    dist_min = min(dist, key=lambda x: x[1])
    print(f"Min: {dist_min}")

l[2].refs

###
code = l[2].unions[l[2].supremum]
code = unsymbolize([code], l[2].refs)[0]


###
inputs, outputs = load()
l_inputs = [input_to_lattice(input) for input in inputs]
l_outputs = [input_to_lattice(output) for output in outputs]
l = l_inputs+l_outputs
symbolize_together(l)

for i, la in enumerate(l):
    print(f"Lattice n°{i}:")
    grid = lattice_to_grid(la)
    print_colored_grid(grid)

la = next(iter(l))
for union in la.unions:
    union_to_grid(union, la.refs)

###
set([1, 2]) in set([1, 2, 3])
[la.supremum]

#####
inputs, outputs = load()
input = inputs[1]
masks = extract_masks_bicolors(input)
component_ls = list_components(masks, proportions(input))
mask_list = [component['mask'] for component in component_ls]
mask = mask_list[5]
is_valid = lambda x: valid_coordinates(*proportions(input), mask, x)
#construct_node(start, is_valid, method)
start = next(iter(mask), None)

node1 = encode_connected_component(mask, start, is_valid, method="dfs")
node2 = encode_connected_component(mask, start, is_valid, method="bfs")
encode_rl(node1)
encode_rl(node2)


unsymbolize([u], la.refs)[0]

for la in l:
    print(la.unions[la.supremum])


code = l[0].unions[6]
unsymb = unsymbolize([code], l[0].refs)[0]
unsymb = unsymbolize(code, l[0].refs)

[1,2,3]

####
problem(task = "48d8fb45.json")

#####
inputs, outputs = load(task = "48d8fb45.json")
l_inputs = [input_to_lattice(input) for input in inputs]
l_outputs = [input_to_lattice(output) for output in outputs]
l = l_inputs+l_outputs
symbolize_together(l)

la = next(iter(l))
for code in la.codes:
    print(f'code: {code}')
    print(f'Unsymbolized: {unsymbolize(code, la.refs)}')
    _, points = decode(unsymbolize(code, la.refs))
    #rid = points_to_grid_colored(points)
    print_colored_grid(grid)

####
inputs, outputs = load()
input = inputs[1]
masks = extract_masks_bicolors(input)
component_ls = list_components(masks, proportions(input))
mask_list = [component['mask'] for component in component_ls]
mask = mask_list[5]
is_valid = lambda x: valid_coordinates(*proportions(input), mask, x)
#construct_node(start, is_valid, method)
start = next(iter(mask), None)

node1 = encode_connected_component(mask, start, is_valid, method="dfs")
node2 = encode_connected_component(mask, start, is_valid, method="bfs")

tree1 = (start, node1)
tree2 = (start, node2)

decode_freeman(tree1)
decode_freeman(tree2)
